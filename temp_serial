import platform
import numpy as np
import argparse
import cv2
import serial
import time
import sys
from threading import Thread

MOTION = {
    "SIGNAL": {"START": 254, "FINISH": 254},
    "MODE": {"WALK": 0, "STABLE": 122, "MOVE": 113, "VIEW": 107, "TURN": 111},

    "VIEW": {"UP": 0, "FRONT": 1, "OBLIQUE": 2, "DOWN": 3, "LEFT": 24, "RIGHT": 25},
    "DIR": {"LEFT": 0, "RIGHT": 1, "FRONT": 2},
    "SCOPE": {"SHORT": 0, "LONG": 1},
    "SPEED": {"SLOW": 0, "FAST": 1},

    "WALK": {
        "START": 100,
        "END": 101,
        "FRONT": 102,
        "CURVE": {
            "LEFT": {"SHORT": 103, "LONG": 105},
            "RIGHT": {"SHORT": 104, "LONG": 106}
        }
    }
}

class Motion:
    def __init__(self):
        #self.do = False
        #self.uart = None
        self.serial_use = 1
        self.serial_port = None
        self.Read_RX = 0
        self.receiving_exit = 1
        self.threading_Time = 0.01
        #self.distance = 99
        BPS = 4800  # 4800,9600,14400, 19200,28800, 57600, 115200

        # ---------local Serial Port : ttyS0 --------
        # ---------USB Serial Port : ttyAMA0 --------

        self.serial_port = serial.Serial('/dev/ttyS0', BPS, timeout=0.01)
        self.serial_port.flush()  # serial cls
        self.serial_t = Thread(target=self.Receiving, args=(self.serial_port,))
        self.serial_t.daemon = True
        self.serial_t.start()
        time.sleep(0.1)

    def TX_data_py2(self, one_byte):  # one_byte= 0~255
        self.serial_port.write(serial.to_bytes([one_byte]))  # python3
        time.sleep(1)

    def RX_data(self):
        if self.serial_port.inWaiting() > 0:
            result = self.serial_port.read(1)
            RX = ord(result)
            return RX
        else:
            return 0

    def Receiving(self, ser):
        #
        # global X_255_point
        # global Y_255_point
        # global X_Size
        # global Y_Size
        # global Area, Angle

        self.receiving_exit = 1
        while True:
            if self.receiving_exit == 0:
                break
            time.sleep(self.threading_Time)
            # 수신받은 데이터의 수가 0보다 크면 데이터를 읽고 출력
            while ser.inWaiting() > 0:
                # Rx, 수신
                result = ser.read(1)
                RX = ord(result)
                print("RX=" + str(RX))

                # -----  remocon 16 Code  Exit ------
                if RX == 16:
                    self.receiving_exit = 0
                    break

    def start(self):
        self.TX_data_py2(self.serial_port, MOTION[""][""])
        pass

    def init(self):
        pass

    def walk(self):
        pass

    def head(self):
        pass

    def move(self):
        pass

    def turn(self):
        pass

    def grab(self):
        pass



# Tx를 보낸 후 응답을 받을 때 까지 Lock을 걸기 반대쪽에서 보낸 Rx가 유실 될 수도 있으니, 일정시간이 지나도 답이 안오면 재요청


if __name__ == '__main__':
    temp = Motion()
    temp.TX_data_py2(temp.serial_port, )
    time.sleep(1)






''' def action(self, data):
        while self.do:
            pass
        try:
            self.do = True
            # Tx, 송신
            self.uart.write(chr(int(data)))
        finally:
            pass

        print(data)

        try:
            while True:
                if self.uart.inWaiting() > 0:
                    self.do = False
                    response = ord(self.uart.read(1))

                    if data in [100, 102, 103, 105, 104, 106, 115, 122, 128, 136] and response / 100 == 1:
                        self.distance = response - 100
                        return response - 100
                    else:
                        if response == MOTION["SIGNAL"]["FINISH"]:
                            return self.distance
                        pass
                    pass
                pass
            pass
        finally:
            pass

        pass '''
